[
    {
        "id": "436938ed0226b400",
        "type": "tab",
        "label": "IIoT Framework",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b670c08ff0955fc3",
        "type": "tab",
        "label": "MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "855f100ad1ed0d83",
        "type": "group",
        "z": "436938ed0226b400",
        "name": "InfluxDB",
        "style": {
            "label": true,
            "color": "#ffC000",
            "stroke": "#ffC000"
        },
        "nodes": [
            "a065451c8ef21680",
            "55d173a5d1af18c5",
            "bf161cf8f286509b",
            "e35ed33b9a25df84"
        ],
        "x": 674,
        "y": 59,
        "w": 692,
        "h": 122
    },
    {
        "id": "4042154c40569621",
        "type": "group",
        "z": "436938ed0226b400",
        "name": "Debug",
        "style": {
            "label": true
        },
        "nodes": [
            "16b6d420cc2489ee",
            "a442b160679ec293",
            "4d4d03b4e17922f0",
            "86a908787636fac8"
        ],
        "x": 674,
        "y": 319,
        "w": 692,
        "h": 282
    },
    {
        "id": "7bc25815b54b0434",
        "type": "group",
        "z": "436938ed0226b400",
        "name": "IIoT Framework",
        "style": {
            "label": true,
            "stroke": "#007C84",
            "color": "#007C84"
        },
        "nodes": [
            "7f1541e8e1b6263c",
            "5294ea4c36e0e1c9",
            "d9e788a3d10b9e3c",
            "4fd6f30510f85dca"
        ],
        "x": 14,
        "y": 79,
        "w": 612,
        "h": 122
    },
    {
        "id": "b17d34f713647319",
        "type": "plc-connector",
        "host": "192.168.2.10",
        "station_name": "",
        "session_timeout": "5000",
        "api_version": "v1.4",
        "auth_required": "true"
    },
    {
        "id": "3d4a2a7d7377b0aa",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://192.168.2.10:58086/",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "b826498401685724",
        "type": "modbus-client",
        "name": "Gefran3",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.2.13",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "13",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "6bb6fa456075eb32",
        "type": "modbus-client",
        "name": "Gefran2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.2.12",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "12",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "03d24f212f3a0679",
        "type": "modbus-client",
        "name": "Gefran1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.2.11",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 11,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "770f0e200820a018",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.2.10",
        "port": "51883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7f1541e8e1b6263c",
        "type": "inject",
        "z": "436938ed0226b400",
        "g": "7bc25815b54b0434",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "5294ea4c36e0e1c9"
            ]
        ]
    },
    {
        "id": "5294ea4c36e0e1c9",
        "type": "plc-read-variables",
        "z": "436938ed0226b400",
        "g": "7bc25815b54b0434",
        "plc_connector": "b17d34f713647319",
        "variables": "Arp.Plc.Eclr/Zone,Arp.Plc.Eclr/Enable",
        "searchbar": "",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "a065451c8ef21680",
                "e82fd5257ec62d60",
                "6bed1dc1f48fe28f",
                "62e6758790924ffe"
            ]
        ]
    },
    {
        "id": "1d1d36485100409f",
        "type": "comment",
        "z": "436938ed0226b400",
        "name": "Collect data from the IIoT Framework and send them to the activated Outputs",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "a065451c8ef21680",
        "type": "function",
        "z": "436938ed0226b400",
        "g": "855f100ad1ed0d83",
        "name": "InfluxDB formatter",
        "func": "// Init data array\nvar zones = msg.payload.variables[0].value\nvar data = []\n\ntry {\n    var datetime = Date.now();\n    for (var elem of zones){\n        \n        temperatureDataPoint = {\n            measurement:'temperature',\n            tags:{\n                Zone:elem.Id,\n            },\n            fields:{\n                PV:elem.PV,\n                SP:elem.SPA,\n            },\n            strTimestamp: datetime,\n        };\n        \n        enabledDataPoint = {\n            measurement:'enabled',\n            tags:{\n                Zone:elem.Id,\n            },\n            fields:{\n                value:elem.Enabled,\n            },\n            strTimestamp: datetime,\n        };\n        \n        outputDataPoint = {\n            measurement:\"output\",\n            tags:{\n                Zone:elem.Id,\n            },\n            fields:{\n                value:elem.Output,\n            },\n            strTimestamp: datetime,\n        };\n        \n        // Insert data points into data array\n        data.push(temperatureDataPoint);\n        data.push(enabledDataPoint);\n        data.push(outputDataPoint);\n    }\n    enableDataPoint = {\n        measurement:'enable',\n        fields:{\n            value:msg.payload.variables[1].value,\n        },\n        strTimestamp: datetime,\n    };\n    data.push(enableDataPoint);\n} catch (e) {\n    node.error(e);\n}\n\n// Hand over payload\nmsg.payload =  data\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 140,
        "wires": [
            [
                "55d173a5d1af18c5",
                "86a908787636fac8"
            ]
        ]
    },
    {
        "id": "55d173a5d1af18c5",
        "type": "influxdb batch",
        "z": "436938ed0226b400",
        "g": "855f100ad1ed0d83",
        "influxdb": "3d4a2a7d7377b0aa",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB Batch",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "keg",
        "bucket": "AAP",
        "x": 1120,
        "y": 140,
        "wires": []
    },
    {
        "id": "16b6d420cc2489ee",
        "type": "debug",
        "z": "436938ed0226b400",
        "g": "4042154c40569621",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 440,
        "wires": []
    },
    {
        "id": "bf161cf8f286509b",
        "type": "comment",
        "z": "436938ed0226b400",
        "d": true,
        "g": "855f100ad1ed0d83",
        "name": "Configuration of InfluxDB Parameters",
        "info": "",
        "x": 1190,
        "y": 100,
        "wires": []
    },
    {
        "id": "d9e788a3d10b9e3c",
        "type": "comment",
        "z": "436938ed0226b400",
        "g": "7bc25815b54b0434",
        "name": "Configuration of PLCnext Parameters",
        "info": "",
        "x": 450,
        "y": 120,
        "wires": []
    },
    {
        "id": "e35ed33b9a25df84",
        "type": "comment",
        "z": "436938ed0226b400",
        "d": true,
        "g": "855f100ad1ed0d83",
        "name": "Activate Node to use InfluxDB",
        "info": "",
        "x": 820,
        "y": 100,
        "wires": []
    },
    {
        "id": "a442b160679ec293",
        "type": "comment",
        "z": "436938ed0226b400",
        "d": true,
        "g": "4042154c40569621",
        "name": "Activate for Debug",
        "info": "",
        "x": 790,
        "y": 520,
        "wires": []
    },
    {
        "id": "4fd6f30510f85dca",
        "type": "comment",
        "z": "436938ed0226b400",
        "g": "7bc25815b54b0434",
        "name": "Configuration of Update Time",
        "info": "",
        "x": 160,
        "y": 120,
        "wires": []
    },
    {
        "id": "e82fd5257ec62d60",
        "type": "function",
        "z": "436938ed0226b400",
        "name": "Gefran3 Formatter",
        "func": "var zones = msg.payload.variables[0].value;\nvar enable = msg.payload.variables[1].value;\nvar lastValues = global.get(\"Write3Vals\");\nvar anyChanges = false;\n\nfunction clampTemp(temp)\n{\n    if (temp < 32)\n        return 32;\n    if (temp > 999)\n        return 999;\n    return temp;\n}\n\nfunction makeWord(num)\n{\n    if (num < 0)\n        num += 32768;\n        \n    return num & 0xFFFF;\n}\n\nmsg.payload = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n]\n\nfor (var z = 0; z < 4; z++)\n{\n    msg.payload[z*4+0] = makeWord(clampTemp(zones[8+z].SP));\n    msg.payload[z*4+1] = makeWord(((enable && zones[8+z].Enable)?0:8) + (zones[8+z].SelfTune?4:0));\n    msg.payload[z*4+2] = makeWord(clampTemp(0));\n    msg.payload[z*4+3] = makeWord(clampTemp(0));\n}\n\nif (Array.isArray(lastValues))\n{\n    for (var i = 0; i < 16; i++)\n    {\n        if (msg.payload[i] != lastValues[i])\n        {\n            anyChanges = true;\n            break;\n        }\n    }\n}\nelse\n{\n    anyChanges = true;\n}\n\nif (anyChanges)\n{\n    global.set(\"Write3Vals\", msg.payload);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 340,
        "wires": [
            [
                "b77d91e366242fb4",
                "16b6d420cc2489ee"
            ]
        ]
    },
    {
        "id": "1662fb1345ef9c0e",
        "type": "inject",
        "z": "436938ed0226b400",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "requestA",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 900,
        "wires": [
            [
                "bc324e90c64a521d",
                "f2f94d02a3cf3ff0",
                "c1aaa25e415e4c68"
            ]
        ]
    },
    {
        "id": "737ff726a8dd25ed",
        "type": "comment",
        "z": "436938ed0226b400",
        "name": "Max 18 registers",
        "info": "Max 18 registers per request",
        "x": 480,
        "y": 800,
        "wires": []
    },
    {
        "id": "5683f8de25a1d598",
        "type": "plc-write-variables",
        "z": "436938ed0226b400",
        "plc_connector": "b17d34f713647319",
        "vars": "",
        "var_list": "{\"items\":[]}",
        "searchbar": "Arp.Plc.Eclr/Zone[9].PV",
        "x": 930,
        "y": 940,
        "wires": [
            [
                "4d4d03b4e17922f0"
            ]
        ]
    },
    {
        "id": "4d4d03b4e17922f0",
        "type": "debug",
        "z": "436938ed0226b400",
        "g": "4042154c40569621",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 560,
        "wires": []
    },
    {
        "id": "6bed1dc1f48fe28f",
        "type": "function",
        "z": "436938ed0226b400",
        "name": "Gefran2 Formatter",
        "func": "var zones = msg.payload.variables[0].value;\nvar enable = msg.payload.variables[1].value;\nvar lastValues = global.get(\"Write2Vals\");\nvar anyChanges = false;\n\nfunction clampTemp(temp)\n{\n    if (temp < 32)\n        return 32;\n    if (temp > 999)\n        return 999;\n    return temp;\n}\n\nfunction makeWord(num)\n{\n    if (num < 0)\n        num += 32768;\n        \n    return num & 0xFFFF;\n}\n\nmsg.payload = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n]\n\nfor (var z = 0; z < 4; z++)\n{\n    msg.payload[z*4+0] = makeWord(clampTemp(zones[4+z].SP));\n    msg.payload[z*4+1] = makeWord(((enable && zones[4+z].Enable)?0:8) + (zones[4+z].SelfTune?4:0));\n    msg.payload[z*4+2] = makeWord(clampTemp(0));\n    msg.payload[z*4+3] = makeWord(clampTemp(0));\n}\n\n\nif (Array.isArray(lastValues))\n{\n    for (var i = 0; i < 16; i++)\n    {\n        if (msg.payload[i] != lastValues[i])\n        {\n            anyChanges = true;\n            break;\n        }\n    }\n}\nelse\n{\n    anyChanges = true;\n}\n\nif (anyChanges)\n{\n    global.set(\"Write2Vals\", msg.payload);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 300,
        "wires": [
            [
                "6e986fd5c9c6a208",
                "16b6d420cc2489ee"
            ]
        ]
    },
    {
        "id": "62e6758790924ffe",
        "type": "function",
        "z": "436938ed0226b400",
        "name": "Gefran1 Formatter",
        "func": "var zones = msg.payload.variables[0].value;\nvar enable = msg.payload.variables[1].value;\nvar lastValues = global.get(\"Write1Vals\");\nvar anyChanges = false;\n\nfunction clampTemp(temp)\n{\n    if (temp < 32)\n        return 32;\n    if (temp > 999)\n        return 999;\n    return temp;\n}\n\nfunction makeWord(num)\n{\n    if (num < 0)\n        num += 32768;\n        \n    return num & 0xFFFF;\n}\n\nmsg.payload = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n]\n\nfor (var z = 0; z < 4; z++)\n{\n    msg.payload[z*4+0] = makeWord(clampTemp(zones[z].SP));\n    msg.payload[z*4+1] = makeWord(((enable && zones[z].Enable)?0:8) + (zones[z].SelfTune?4:0));\n    msg.payload[z*4+2] = makeWord(clampTemp(0));\n    msg.payload[z*4+3] = makeWord(clampTemp(0));\n}\n\n\nif (Array.isArray(lastValues))\n{\n    for (var i = 0; i < 16; i++)\n    {\n        if (msg.payload[i] != lastValues[i])\n        {\n            anyChanges = true;\n            break;\n        }\n    }\n}\nelse\n{\n    anyChanges = true;\n}\n\nif (anyChanges)\n{\n    global.set(\"Write1Vals\", msg.payload);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "ae3ce5dd92d8f904",
                "16b6d420cc2489ee"
            ]
        ]
    },
    {
        "id": "59151a69276feef8",
        "type": "function",
        "z": "436938ed0226b400",
        "name": "PLCnext Formatter",
        "func": "values = msg.payload;\nmsg.payload = {\n    variables: []\n}\n\nvar firstZone = 1;\n\nif (msg.modbusRequest.unitid == \"11\")\n    firstZone = 1;\nelse if (msg.modbusRequest.unitid == \"12\")\n    firstZone = 5;\nelse if (msg.modbusRequest.unitid == \"13\")\n    firstZone = 9;\n\nfunction makeVariable(zone, name, value)\n{\n    return {\n        path:`Arp.Plc.Eclr/Zone[${zone+firstZone}].${name}`,\n        value: value,\n        valueType:\"Constant\"\n    }\n}\n\nfor (var z=0; z<4; z++)\n{\n    if (msg.topic == \"requestA\")\n    {\n        msg.payload.variables[z*4+0] = makeVariable(z,\"PV\",values[z*4+0]);\n        msg.payload.variables[z*4+1] = makeVariable(z,\"SPA\",values[z*4+1]);\n        msg.payload.variables[z*4+2] = makeVariable(z,\"Output\",values[z*4+2]*0.1);\n        msg.payload.variables[z*4+3] = makeVariable(z,\"Alarms\",values[z*4+3]);\n    }\n    else if (msg.topic == \"requestB\")\n    {\n        msg.payload.variables[z] = makeVariable(z, \"Amps\", values[z*3+0]*0.1);\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 940,
        "wires": [
            [
                "5683f8de25a1d598"
            ]
        ]
    },
    {
        "id": "bc324e90c64a521d",
        "type": "modbus-getter",
        "z": "436938ed0226b400",
        "name": "Read3a",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "13",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "18",
        "server": "b826498401685724",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 480,
        "y": 1000,
        "wires": [
            [
                "59151a69276feef8"
            ],
            []
        ]
    },
    {
        "id": "f2f94d02a3cf3ff0",
        "type": "modbus-getter",
        "z": "436938ed0226b400",
        "name": "Read2a",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "12",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "18",
        "server": "6bb6fa456075eb32",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 480,
        "y": 920,
        "wires": [
            [
                "59151a69276feef8"
            ],
            []
        ]
    },
    {
        "id": "c1aaa25e415e4c68",
        "type": "modbus-getter",
        "z": "436938ed0226b400",
        "name": "Read1a",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "11",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "18",
        "server": "03d24f212f3a0679",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 480,
        "y": 840,
        "wires": [
            [
                "59151a69276feef8"
            ],
            []
        ]
    },
    {
        "id": "b77d91e366242fb4",
        "type": "modbus-write",
        "z": "436938ed0226b400",
        "name": "Write3",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "13",
        "dataType": "MHoldingRegisters",
        "adr": "32",
        "quantity": "16",
        "server": "b826498401685724",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 950,
        "y": 340,
        "wires": [
            [
                "16b6d420cc2489ee"
            ],
            []
        ]
    },
    {
        "id": "6e986fd5c9c6a208",
        "type": "modbus-write",
        "z": "436938ed0226b400",
        "name": "Write2",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "12",
        "dataType": "MHoldingRegisters",
        "adr": "32",
        "quantity": "16",
        "server": "6bb6fa456075eb32",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 950,
        "y": 300,
        "wires": [
            [
                "16b6d420cc2489ee"
            ],
            []
        ]
    },
    {
        "id": "ae3ce5dd92d8f904",
        "type": "modbus-write",
        "z": "436938ed0226b400",
        "name": "Write1",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "11",
        "dataType": "MHoldingRegisters",
        "adr": "32",
        "quantity": "16",
        "server": "03d24f212f3a0679",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 950,
        "y": 260,
        "wires": [
            [
                "16b6d420cc2489ee"
            ],
            []
        ]
    },
    {
        "id": "86a908787636fac8",
        "type": "debug",
        "z": "436938ed0226b400",
        "g": "4042154c40569621",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 360,
        "wires": []
    },
    {
        "id": "21ef9f4e2ece390b",
        "type": "modbus-getter",
        "z": "436938ed0226b400",
        "name": "Read1b",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "11",
        "dataType": "HoldingRegister",
        "adr": "18",
        "quantity": "14",
        "server": "03d24f212f3a0679",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 480,
        "y": 880,
        "wires": [
            [
                "59151a69276feef8"
            ],
            []
        ]
    },
    {
        "id": "8a39b70a7a2f7fa1",
        "type": "modbus-getter",
        "z": "436938ed0226b400",
        "name": "Read2b",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "12",
        "dataType": "HoldingRegister",
        "adr": "18",
        "quantity": "14",
        "server": "6bb6fa456075eb32",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 480,
        "y": 960,
        "wires": [
            [
                "59151a69276feef8"
            ],
            []
        ]
    },
    {
        "id": "c6b253b993aefb30",
        "type": "modbus-getter",
        "z": "436938ed0226b400",
        "name": "Read3b",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "13",
        "dataType": "HoldingRegister",
        "adr": "18",
        "quantity": "14",
        "server": "b826498401685724",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 480,
        "y": 1040,
        "wires": [
            [
                "59151a69276feef8"
            ],
            []
        ]
    },
    {
        "id": "73683e0f1723d444",
        "type": "inject",
        "z": "436938ed0226b400",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1.1",
        "topic": "requestB",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 980,
        "wires": [
            [
                "21ef9f4e2ece390b",
                "8a39b70a7a2f7fa1",
                "c6b253b993aefb30"
            ]
        ]
    },
    {
        "id": "f9e9e51f6ff5bfab",
        "type": "plc-read-variables",
        "z": "b670c08ff0955fc3",
        "plc_connector": "b17d34f713647319",
        "variables": "Arp.Plc.Eclr/LoadCell",
        "searchbar": "",
        "x": 317.89581298828125,
        "y": 162.90277099609375,
        "wires": [
            [
                "58350ca61e2e6967",
                "627ef1f307b8f95b"
            ]
        ]
    },
    {
        "id": "34eea984295af8d9",
        "type": "inject",
        "z": "b670c08ff0955fc3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 97.89581298828125,
        "y": 162.90277099609375,
        "wires": [
            [
                "f9e9e51f6ff5bfab"
            ]
        ]
    },
    {
        "id": "278f34b1330ddbe3",
        "type": "mqtt out",
        "z": "b670c08ff0955fc3",
        "name": "",
        "topic": "Pull01/Stream01/Force",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "770f0e200820a018",
        "x": 780,
        "y": 160,
        "wires": []
    },
    {
        "id": "196fb00289803cc7",
        "type": "comment",
        "z": "b670c08ff0955fc3",
        "name": "Read Force Analog",
        "info": "",
        "x": 317.89581298828125,
        "y": 122.90277099609375,
        "wires": []
    },
    {
        "id": "6b3e4a9f998ebc7b",
        "type": "debug",
        "z": "b670c08ff0955fc3",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 240,
        "wires": []
    },
    {
        "id": "58350ca61e2e6967",
        "type": "function",
        "z": "b670c08ff0955fc3",
        "name": "function 1",
        "func": "msg.payload = msg.payload.variables[0].value;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "6b3e4a9f998ebc7b",
                "278f34b1330ddbe3"
            ]
        ]
    },
    {
        "id": "627ef1f307b8f95b",
        "type": "debug",
        "z": "b670c08ff0955fc3",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 80,
        "wires": []
    }
]